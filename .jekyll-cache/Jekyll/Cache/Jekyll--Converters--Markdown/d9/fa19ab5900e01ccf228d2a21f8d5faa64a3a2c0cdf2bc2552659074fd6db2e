I"/<h1 id="нахождение-строк-соответствующих-шаблону">Нахождение строк, соответствующих шаблону</h1>

<h2 id="содержание">Содержание</h2>

<ul>
  <li>Сырые строки <code class="language-plaintext highlighter-rouge">r''</code></li>
  <li>Метод <code class="language-plaintext highlighter-rouge">group()</code></li>
  <li>Запоминающие группы</li>
  <li>Ограничение жадности квантификаторов</li>
</ul>

<p>Если в регулярном выражениии используются специальные значения с <code class="language-plaintext highlighter-rouge">\</code>, то лучше использовать синтаксис для «сырых» (raw) строк. Приведем простой пример использования «сырых» строк: предположим, что нужно написать строку, которая бы содержала два подряд идущих символа: <code class="language-plaintext highlighter-rouge">\</code> и <code class="language-plaintext highlighter-rouge">n</code>. Мы уже знаем, что если просто написать <code class="language-plaintext highlighter-rouge">'\n'</code>, то Python превратит это сочетание в символ переноса строки. Однако, если написать <code class="language-plaintext highlighter-rouge">r'\n'</code>, то Python не будет производить никаких преобразований внутри этой строки.</p>

<p>Проверим, есть ли числа в строке:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">re</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="sa">r</span><span class="s">'\d'</span><span class="p">,</span> <span class="s">'Я родился 30 февраля 1930 года'</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p>Часто нам не просто нужно узнать, находится ли что-то нас интересующее в строке, но и узнать, что именно нашлось. Но функция <code class="language-plaintext highlighter-rouge">re.search</code> возвращает не совсем то, чего бы нам хотелось:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="s">'abc'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">r</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="s">'a'</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">r</span>
<span class="o">&lt;</span><span class="n">_sre</span><span class="p">.</span><span class="n">SRE_Match</span> <span class="nb">object</span><span class="p">;</span> <span class="n">span</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">match</span><span class="o">=</span><span class="s">'a'</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>Это такой объект, а нам хотелось бы саму найденную строку.</p>

<p>Чтобы получить найденную строку, существует метод <code class="language-plaintext highlighter-rouge">group()</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">first_match</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="s">'кот.'</span><span class="p">,</span> <span class="s">'Кот пришёл к коту и спросил кота: «Бойкот, котелок или скотч?»'</span><span class="p">)</span>
<span class="k">if</span> <span class="n">first_match</span><span class="p">:</span>
    <span class="n">first_match</span><span class="p">.</span><span class="n">group</span><span class="p">()</span>    <span class="c1"># 'кот '
</span><span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Nothing found.'</span><span class="p">)</span>
</code></pre></div></div>

<p>Если нужно найти в строке несколько подстрок, то каждую из них можно выделить с помощью круглых скобок.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="s">'корова молоко'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">r</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="s">'(.+?оро.+?) (.+?оло.+)'</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">r</span>
<span class="o">&lt;</span><span class="n">_sre</span><span class="p">.</span><span class="n">SRE_Match</span> <span class="nb">object</span><span class="p">;</span> <span class="n">span</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">12</span><span class="p">),</span> <span class="n">match</span><span class="o">=</span><span class="s">'корова молоко'</span><span class="o">&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="s">'корова'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="s">'молоко'</span>
</code></pre></div></div>

<h1 id="ограничение-жадности">Ограничение жадности</h1>

<p>Если мы хотим выделить в шаблоне только часть строки и сделать её запоминающей группой, то у нас возможны случаи двойного толкования шаблона, как в примере выше:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="s">'корова молоко'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">r</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="s">'(.+?оро.+?) (.+?оло.+)'</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
</code></pre></div></div>

<p>В строке <code class="language-plaintext highlighter-rouge">'корова молоко'</code> мы хотим выделить всё слово, содержащее <code class="language-plaintext highlighter-rouge">оро</code> до пробела после него. Поэтому в шаблоне мы пишем после слова “ограничитель” в виде пробела, подразумевая, что парсер регулярных выражений “дойдёт” до этого пробела и остановится. Но <code class="language-plaintext highlighter-rouge">.</code> означает любой символ, в том числе и пробел. Как будет трактоваться такое выражение? Будет ли пробел “захватываться” группой?</p>

<p>По умолчанию квантификаторы (прежде всего, <code class="language-plaintext highlighter-rouge">+</code> и <code class="language-plaintext highlighter-rouge">*</code>) жадные (greedy). Это значит, что они стремятся “съесть” как можно больше символов, подходящих под шаблон. Если мы ожидаем, что в строке <code class="language-plaintext highlighter-rouge">'Онегин, добрый мой приятель'</code> такой шаблон <code class="language-plaintext highlighter-rouge">'^.+ '</code> (справа от квантификатора ограничитель в виде пробела) захватит только первое слово “Онегин”, то мы ошибаемся:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="s">'Онегин, добрый мой приятель'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">r</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="s">'^.+ '</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">group</span><span class="p">())</span>
<span class="n">Онегин</span><span class="p">,</span> <span class="n">добрый</span> <span class="n">мой</span>
</code></pre></div></div>

<p>Ограничитель действует, но только это не первый, а последний пробел в строке, после “мой” перед “приятель”, а не после “Онегина”, как мы хотели.</p>

<p>Чтобы этот шаблон работал как нужно, необходимо ограничить жадность квантификатора. Это делается с подстановкой после него символа <code class="language-plaintext highlighter-rouge">?</code>. Таким образом, чтобы квантификатор был нежадным, его следует записать так: <code class="language-plaintext highlighter-rouge">.+?</code>. Проверим:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="s">'Онегин, добрый мой приятель'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">r</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="s">'^.+? '</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">group</span><span class="p">())</span>
<span class="n">Онегин</span><span class="p">,</span>
</code></pre></div></div>

<h1 id="домашнее-задание">Домашнее задание</h1>

<p><a href="/prog/16-regexp#домашнее-задание">Продолжаем делать задание по регуляркам</a></p>
:ET