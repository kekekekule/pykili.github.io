I"T^<h1 id="план-этого-занятия">План этого занятия</h1>
<ul>
  <li>Изучение лексикона персонажей сериала «Рик и Морти»</li>
</ul>

<h1 id="задача-на-семинар">Задача на семинар</h1>

<p>Мы будем работать с базой данных реплик, произнесённых в сериале «Рик и Морти».
Скачайте данные из репозитория <a href="https://github.com/techcentaur/The-GrandFather">github.com/techcentaur/The-GrandFather</a>, папку <code class="language-plaintext highlighter-rouge">dataset</code> положите в папку с программой.
Ваша задача — написать программу, которая будет считать сколько раз было произнесено какое-то слово данным персонажем.
Программа должна спросить слово и имя персонажа у пользователя, притом, если в качестве имени введено специальное слово «all», то считать реплики всех персонажей вместе.
Обязательно используйте функции!</p>

<h1 id="пример-решения">Пример решения</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
</span>

<span class="n">PUNCT_CHARS</span> <span class="o">=</span> <span class="s">""",.:;"'`()-"""</span>
<span class="n">PUNCT_CHARS_WITH_SPACES</span> <span class="o">=</span> <span class="p">(</span><span class="s">' -'</span><span class="p">,</span> <span class="s">'- '</span><span class="p">,)</span>
<span class="n">SEASONS</span> <span class="o">=</span> <span class="p">(</span>
    <span class="nb">tuple</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">)),</span>
    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">10</span><span class="p">,),</span>
    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,),</span>
<span class="p">)</span>


<span class="k">def</span> <span class="nf">get_words</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="n">lower</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">PUNCT_CHARS_WITH_SPACES</span><span class="p">:</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="n">char</span><span class="p">,</span> <span class="s">''</span><span class="p">)</span>
    <span class="n">words</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">w</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">words</span><span class="p">):</span>
        <span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">w</span><span class="p">.</span><span class="n">strip</span><span class="p">(</span><span class="n">PUNCT_CHARS</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">words</span>


<span class="k">def</span> <span class="nf">produce_file_list</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">sufix</span><span class="p">,</span> <span class="n">episodes</span><span class="p">):</span>
    <span class="n">files</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">episodes</span><span class="p">:</span>
        <span class="nb">file</span> <span class="o">=</span> <span class="n">prefix</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="n">sufix</span>
        <span class="n">files</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">file</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">files</span>


<span class="k">def</span> <span class="nf">get_episode_list</span><span class="p">(</span><span class="n">seasons</span><span class="p">):</span>
    <span class="n">files</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">episodes</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">seasons</span><span class="p">):</span>
        <span class="n">season</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="n">prefix</span> <span class="o">=</span> <span class="s">'./dataset/season'</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">season</span><span class="p">)</span> <span class="o">+</span> <span class="s">'/episode'</span>
        <span class="n">files</span><span class="p">.</span><span class="n">extend</span><span class="p">(</span><span class="n">produce_file_list</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="s">'.txt'</span><span class="p">,</span> <span class="n">episodes</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">files</span>


<span class="k">def</span> <span class="nf">remove_remarks</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">idx_left</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">'('</span><span class="p">)</span>
        <span class="n">idx_right</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">')'</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">idx_left</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">or</span> <span class="n">idx_right</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
            <span class="k">break</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">[:</span><span class="n">idx_left</span><span class="p">]</span> <span class="o">+</span> <span class="n">text</span><span class="p">[</span><span class="n">idx_right</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:]</span>
    <span class="k">return</span> <span class="n">text</span>


<span class="k">def</span> <span class="nf">parse_episode</span><span class="p">(</span><span class="n">episode</span><span class="p">,</span> <span class="n">character</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="n">cues</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s">''</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">episode</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">'utf-8'</span><span class="p">)</span> <span class="k">as</span> <span class="n">fh</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">strip</span><span class="p">()</span>
            <span class="c1"># if not line:
</span>            <span class="k">if</span> <span class="n">line</span> <span class="o">==</span> <span class="s">''</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">line</span><span class="p">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">'['</span><span class="p">)</span> <span class="ow">or</span> <span class="n">line</span><span class="p">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">'('</span><span class="p">))</span>
                    <span class="ow">and</span> <span class="p">(</span><span class="n">line</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">']'</span><span class="p">)</span> <span class="ow">or</span> <span class="n">line</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">')'</span><span class="p">))):</span>
                <span class="k">continue</span>
            <span class="n">splitted_line</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">': '</span><span class="p">,</span> <span class="n">maxsplit</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">splitted_line</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
                <span class="n">name</span> <span class="o">=</span> <span class="n">splitted_line</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">text</span> <span class="o">=</span> <span class="n">splitted_line</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">text</span> <span class="o">=</span> <span class="n">remove_remarks</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">character</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">character</span> <span class="ow">in</span> <span class="n">name</span><span class="p">:</span>
                <span class="n">cues</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">cues</span>


<span class="k">def</span> <span class="nf">ask_user</span><span class="p">(</span><span class="n">what</span><span class="p">):</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">character</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="n">what</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">character</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">character</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'Say something'</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">count_word</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">text</span><span class="p">):</span>
    <span class="n">words</span> <span class="o">=</span> <span class="n">get_words</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">words</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">x</span>


<span class="k">def</span> <span class="nf">print_result</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">word</span><span class="p">,</span> <span class="n">count</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span>
        <span class="s">'Character'</span><span class="p">,</span>
        <span class="n">name</span><span class="p">,</span>
        <span class="s">'says word'</span><span class="p">,</span>
        <span class="n">word</span><span class="p">,</span>
        <span class="n">count</span><span class="p">,</span>
        <span class="s">'times'</span><span class="p">,</span>
    <span class="p">)</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">episodes</span> <span class="o">=</span> <span class="n">get_episode_list</span><span class="p">(</span><span class="n">SEASONS</span><span class="p">)</span>
    <span class="n">char</span> <span class="o">=</span> <span class="n">character</span> <span class="o">=</span> <span class="n">ask_user</span><span class="p">(</span><span class="s">'Input character name, "all" for everyone: '</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Working...'</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">character</span><span class="p">.</span><span class="n">lower</span><span class="p">()</span> <span class="o">==</span> <span class="s">'all'</span><span class="p">:</span>
        <span class="n">char</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">cues</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">episodes</span><span class="p">:</span>
        <span class="n">cues</span><span class="p">.</span><span class="n">extend</span><span class="p">(</span><span class="n">parse_episode</span><span class="p">(</span><span class="nb">file</span><span class="p">,</span> <span class="n">char</span><span class="p">))</span>
    <span class="n">text</span> <span class="o">=</span> <span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">cues</span><span class="p">)</span>
    <span class="n">word</span> <span class="o">=</span> <span class="n">ask_user</span><span class="p">(</span><span class="s">'Input word to count: '</span><span class="p">)</span>
    <span class="n">count</span> <span class="o">=</span> <span class="n">count_word</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
    <span class="n">print_result</span><span class="p">(</span><span class="n">character</span><span class="p">,</span> <span class="n">word</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>

</code></pre></div></div>

<h1 id="домашнее-задание">Домашнее задание</h1>

<p>Вам нужно написать программу, порождающую случайные грамматически правильные, но бессмысленные тексты.  </p>

<p>Вместо тысячи объяснений прикладываем два образца программ: <a href="https://github.com/pykili/pykili.github.io/tree/master/py/poem_generator.py">poem_generator.py</a> порождает стихотворение на русском языке, написанное трехстопным анапестом, <a href="https://github.com/pykili/pykili.github.io/blob/master/py/sentence_generator.py">sentence_generator.py</a> порождает текст на английском языке. Посмотрев программы, вы поймёте, как такая программа должна быть устроена и какие в ней должны быть функции.  Функции, естественно, не обязательно делать ровно такими же, как в этой программе (и даже желательно сделать их как-нибудь по-своему), но каждая ваша функция должна делать какую-то одну определённую операцию — таким образом, функций у вас в программе должно быть не одна и не две. </p>

<p>Для работы вам понадобится функция выбора случайного элемента из списка. Чтобы её использовать, в самом начале программы нужно написать</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">random</span>
</code></pre></div></div>

<p>— это указание питону использовать модуль <a href="https://docs.python.org/3/library/random.html">random</a>, в котором хранится нужная функция. А сама функция называется <code class="language-plaintext highlighter-rouge">random.choice()</code>. Если у Вас есть список array, то после строчки</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">x</code> станет равен какому-то случайно выбранному элементу этого списка. В программе <code class="language-plaintext highlighter-rouge">sentence_generator.py</code> также используется функция <code class="language-plaintext highlighter-rouge">random.randint(x, y)</code>, которая выбирает случайное число от <code class="language-plaintext highlighter-rouge">x</code> до <code class="language-plaintext highlighter-rouge">y</code>.</p>

<p>Слова для текстов должны быть взяты из отдельных txt-файлов, открываемых программой. Эти файлы следует загрузить в репозиторий вместе с кодом выполненного домашнего задания. Также желательно в функции уложить вообще весь код.  Дополнительные ограничения по вариантам:  </p>

<p>1. Текст должен представлять собой правильное хайку, то есть стихотворение на русском языке из трёх строк без рифмы, при этом длина первой строки должна быть 5 слогов, второй строки - 7 слогов, третьей строки - 5 слогов.  Количество предложений в таком тексте может быть любым. </p>

<p>2. Текст должен представлять собой стихотворение на русском языке из четырёх строк без рифмы, но написанное с соблюдением одной метрической схемы, кроме трёхстопного анапеста. </p>

<p>3. Текст должен состоять из 5 предложений разных типов (утвердительные, вопросительные, отрицательные, условные, побудительные) на русском языке. Типы предложений должны выводиться в случайном порядке. </p>

<p>4. Текст должен представлять собой правильное хайку, то есть стихотворение на одном из изучаемых вами языков (французский, итальянский, японский, немецкий, персидский) из трёх строк без рифмы, при этом длина первой строки должна быть 5 слогов, второй строки - 7 слогов, третьей строки - 5 слогов. Количество предложений в таком тексте может быть любым. </p>

<p>5. Текст должен быть не короче, чем 5 предложений на русском языке. Предложения должны быть сложносочинёнными и сложноподчинёнными. </p>

<p>6. Текст должен состоять из 5 предложений разных типов (утвердительные, вопросительные, отрицательные, условные, побудительные) на изучаемом вами языке (французский, испанский). Типы предложений должны выводиться в случайном порядке. </p>

<p>7. Текст должен представлять собой танка, то есть стихотворение на русском языке из пяти строк без рифмы, при этом длина первой строки должна быть 5 слогов, второй строки - 7 слогов, третьей строки - 5 слогов, четвёртая и пятая строка - по 7 слогов. Количество предложений в таком тексте может быть любым. </p>

<p><strong>Выполните задание пройдя по ссылке в GitHub Classroom:</strong></p>

<ul>
  <li>1 группа: дедлайн - 25 января 2019 23:55 <a href="https://classroom.github.com/a/MQ_QKjjs">https://classroom.github.com/a/MQ_QKjjs</a></li>
  <li>2 группа: дедлайн - 20 января 2019 23:55 <a href="https://classroom.github.com/a/ZzPT5P09">https://classroom.github.com/a/ZzPT5P09</a></li>
  <li>3 группа: дедлайн - 20 января 2019 23:55 <a href="https://classroom.github.com/a/x5WOG9za">https://classroom.github.com/a/x5WOG9za</a></li>
  <li>4 группа: дедлайн - 22 января 2019 23:55 <a href="https://classroom.github.com/a/3TXLSuld">https://classroom.github.com/a/3TXLSuld</a></li>
</ul>
:ET